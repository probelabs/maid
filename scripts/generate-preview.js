#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function generateMarkdownPreview(diagramType = 'flowchart') {
  const fixturesDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType);
  const validDir = path.join(fixturesDir, 'valid');
  
  if (!fs.existsSync(validDir)) {
    console.error(`No valid fixtures found for diagram type: ${diagramType}`);
    process.exit(1);
  }
  
  const validFiles = fs.readdirSync(validDir)
    .filter(f => f.endsWith('.mmd'))
    .sort();
  
  let markdown = `# Valid ${diagramType.charAt(0).toUpperCase() + diagramType.slice(1)} Diagrams

This file contains all valid ${diagramType} test fixtures rendered as Mermaid diagrams.
These diagrams are validated to be 100% compatible with mermaid-cli.

> **Note**: This file is auto-generated by \`scripts/generate-preview.js\`. Do not edit manually.

## Table of Contents

`;

  // Generate table of contents
  validFiles.forEach((file, index) => {
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    markdown += `${index + 1}. [${title}](#${index + 1}-${file.replace('.mmd', '').toLowerCase()})\n`;
  });
  
  markdown += `\n---\n\n`;
  
  // Generate diagram sections
  validFiles.forEach((file, index) => {
    const filePath = path.join(validDir, file);
    const content = fs.readFileSync(filePath, 'utf-8');
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    
    markdown += `## ${index + 1}. ${title}\n\n`;
    markdown += `ðŸ“„ **Source**: [\`${file}\`](./valid/${file})\n\n`;
    
    // Add description based on filename
    const descriptions = {
      'simple-flow': 'Basic flowchart with simple node connections.',
      'with-text': 'Flowchart with text labels and decision nodes.',
      'complex-shapes': 'Demonstrates all available node shapes in Mermaid.',
      'subgraphs': 'Shows subgraph grouping functionality.',
      'nested-subgraphs': 'Nested subgraphs with multiple levels.',
      'special-arrows': 'Various arrow types and directions.',
      'link-styles': 'Different link and arrow styles.',
      'multidirectional-arrows': 'Bidirectional and special endpoint arrows.',
      'chained-connections': 'Chained node connections and multi-target syntax.',
      'node-ids-special': 'Special characters in node IDs.',
      'unicode-text': 'Unicode characters and emojis in node text.',
      'empty-nodes': 'Nodes with empty or whitespace-only content.',
      'long-text': 'Nodes with long text content.',
      'styling-classes': 'CSS class definitions and styling.',
      'only-nodes': 'Nodes defined without any connections.',
      'comments': 'Diagrams with comments.',
      'undefined-node': 'Auto-creation of nodes when referenced in links.'
    };
    
    const key = file.replace('.mmd', '');
    if (descriptions[key]) {
      markdown += `> ${descriptions[key]}\n\n`;
    }
    
    // Add the Mermaid diagram
    markdown += `\`\`\`mermaid\n${content}\n\`\`\`\n\n`;
    
    // Add collapsible source code section
    markdown += `<details>\n`;
    markdown += `<summary>View source code</summary>\n\n`;
    markdown += `\`\`\`\n${content}\n\`\`\`\n`;
    markdown += `</details>\n\n`;
    
    markdown += `---\n\n`;
  });
  
  // Add footer
  markdown += `## Validation Status

All diagrams in this file have been validated against:
- âœ… Our Mermaid linter
- âœ… Official mermaid-cli
- âœ… GitHub's Mermaid renderer

Last generated: ${new Date().toISOString()}

## How to Regenerate

\`\`\`bash
node scripts/generate-preview.js ${diagramType}
\`\`\`
`;
  
  return markdown;
}

function main() {
  const diagramType = process.argv[2] || 'flowchart';
  const outputPath = path.resolve(__dirname, '..', 'test-fixtures', diagramType, 'VALID_DIAGRAMS.md');
  
  console.log(`Generating preview for ${diagramType} diagrams...`);
  
  const markdown = generateMarkdownPreview(diagramType);
  
  fs.writeFileSync(outputPath, markdown);
  
  console.log(`âœ… Generated preview at: ${outputPath}`);
  console.log(`ðŸ“Š Total valid diagrams: ${markdown.match(/```mermaid/g).length}`);
}

main();