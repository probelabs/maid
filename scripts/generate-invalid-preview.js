#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function runMermaidCli(filepath) {
  try {
    execSync(`npx @mermaid-js/mermaid-cli -i "${filepath}" -o /tmp/test.svg`, {
      stdio: 'pipe',
      encoding: 'utf8',
      timeout: 8000,
    });
    try { fs.unlinkSync('/tmp/test.svg'); } catch {}
    return { valid: true, message: 'VALID' };
  } catch (error) {
    const msg = (error.stderr || error.stdout || error.message || '').toString();
    try { fs.unlinkSync('/tmp/test.svg'); } catch {}
    return { valid: false, message: msg.trim() || 'INVALID (no message)' };
  }
}

function runOurLinter(filepath) {
  try {
    const out = execSync(`node ./out/cli.js "${filepath}"`, {
      stdio: 'pipe',
      encoding: 'utf8',
      cwd: path.resolve(__dirname, '..'),
      timeout: 8000,
    });
    return { valid: true, message: out.trim() || 'VALID' };
  } catch (error) {
    const msg = ((error.stdout || '') + (error.stderr || '')).toString();
    return { valid: false, message: msg.trim() || 'INVALID (no message)' };
  }
}

function generateInvalidMarkdown(diagramType = 'flowchart') {
  const fixturesDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType);
  const invalidDir = path.join(fixturesDir, 'invalid');
  
  if (!fs.existsSync(invalidDir)) {
    console.error(`No invalid fixtures found for diagram type: ${diagramType}`);
    process.exit(1);
  }
  
  const invalidFiles = fs.readdirSync(invalidDir)
    .filter(f => f.endsWith('.mmd'))
    .sort();
  
  let markdown = `# Invalid ${diagramType.charAt(0).toUpperCase() + diagramType.slice(1)} Diagrams

This file contains invalid ${diagramType} test fixtures with:
- GitHub render attempts
- Error from mermaid-cli
- Error/output from our linter

> Note: Auto-generated by \`scripts/generate-invalid-preview.js\`. Do not edit manually.

## Table of Contents

`;

  // Prepare results by running both tools once per file
  const results = invalidFiles.map((file, index) => {
    const filePath = path.join(invalidDir, file);
    const mermaidRes = runMermaidCli(filePath);
    const ourRes = runOurLinter(filePath);
    return { file, index, filePath, mermaidRes, ourRes };
  });

  // Generate table of contents
  results.forEach(({ file, index }) => {
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    markdown += `${index + 1}. [${title}](#${index + 1}-${file.replace('.mmd', '').toLowerCase()})\n`;
  });
  
  markdown += `\n---\n\n`;

  // Summary matrix
  markdown += `## Summary\n\n`;
  markdown += `| # | Diagram | mermaid-cli | mermaid-lint |\n|---:|---|:---:|:---:|\n`;
  results.forEach(({ file, index, mermaidRes, ourRes }) => {
    const base = file.replace('.mmd', '');
    const name = base.replace(/-/g, ' ');
    const title = name.split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ');
    const anchor = `#${index + 1}-${base.toLowerCase()}`;
    const mm = mermaidRes.valid ? 'VALID' : 'INVALID';
    const us = ourRes.valid ? 'VALID' : 'INVALID';
    markdown += `| ${index + 1} | [${title}](${anchor}) | ${mm} | ${us} |\n`;
  });
  markdown += `\n---\n\n`;
  
  // Generate diagram sections
  results.forEach(({ file, index, filePath, mermaidRes, ourRes }) => {
    const content = fs.readFileSync(filePath, 'utf-8');
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');

    markdown += `## ${index + 1}. ${title}\n\n`;
    markdown += `📄 **Source**: [\`${file}\`](./invalid/${file})\n\n`;
    
    // Add error descriptions
    const errorDescriptions = {
      'duplicate-subgraph': '❌ **Error**: Duplicate subgraph IDs are not allowed.',
      'empty-diagram': '❌ **Error**: Diagram must contain at least one statement after declaration.',
      'invalid-arrow': '❌ **Error**: Single arrow `->` is invalid. Use `-->` instead.',
      'invalid-class': '❌ **Error**: Class statement requires both node ID(s) and class name.',
      'invalid-node-syntax': '❌ **Error**: Incomplete node syntax with unclosed brackets.',
      'invalid-subgraph': '❌ **Error**: Subgraph must have an ID or title.',
      'missing-arrow': '❌ **Error**: Nodes on the same line must be connected with arrows.',
      'mixed-brackets': '❌ **Error**: Mixing bracket types like `[text)` is not allowed.',
      'no-diagram-type': '❌ **Error**: Diagram must start with `graph` or `flowchart`.',
      'special-chars': '❌ **Error**: Escaped quotes with backslash not supported in node labels.',
      'unclosed-bracket': '❌ **Error**: All brackets must be properly closed.',
      'unmatched-end': '❌ **Error**: `end` keyword without matching `subgraph`.',
      'wrong-direction': '❌ **Error**: Invalid direction. Must be one of: TD, TB, BT, RL, LR.'
    };
    
    const key = file.replace('.mmd', '');
    if (errorDescriptions[key]) {
      markdown += `${errorDescriptions[key]}\n\n`;
    }
    
    // Add the Mermaid diagram (even though it's invalid, to see how GitHub renders it)
    markdown += `### GitHub Render Attempt\n\n`;
    markdown += `> **Note**: This invalid diagram may not render or may render incorrectly.\n\n`;
    markdown += `\`\`\`mermaid\n${content}\n\`\`\`\n\n`;

    markdown += `### mermaid-cli Result: ${mermaidRes.valid ? 'VALID' : 'INVALID'}\n\n`;
    if (!mermaidRes.valid) {
      markdown += `\`\`\`\n${mermaidRes.message}\n\`\`\`\n\n`;
    }

    markdown += `### mermaid-lint Result: ${ourRes.valid ? 'VALID' : 'INVALID'}\n\n`;
    if (!ourRes.valid) {
      markdown += `\`\`\`\n${ourRes.message}\n\`\`\`\n\n`;
    }

    // Add collapsible source code section
    markdown += `<details>\n`;
    markdown += `<summary>View source code</summary>\n\n`;
    markdown += `\`\`\`\n${content}\n\`\`\`\n`;
    markdown += `</details>\n\n`;
    
    markdown += `---\n\n`;
  });
  
  // Add footer (capture outputs; don't assert overall validity)
  markdown += `## Notes

This document captures outputs from both tools for each fixture. Use the summary table above to spot mismatches.

Last generated: ${new Date().toISOString()}

## How to Regenerate

\`\`\`bash
node scripts/generate-invalid-preview.js ${diagramType}
\`\`\`
`;
  
  return markdown;
}

function main() {
  const diagramType = process.argv[2] || 'flowchart';
  const outputPath = path.resolve(__dirname, '..', 'test-fixtures', diagramType, 'INVALID_DIAGRAMS.md');
  const invalidDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType, 'invalid');
  
  console.log(`Generating invalid preview for ${diagramType} diagrams...`);
  
  const markdown = generateInvalidMarkdown(diagramType);
  
  fs.writeFileSync(outputPath, markdown);
  
  const invalidFiles = fs.readdirSync(invalidDir).filter(f => f.endsWith('.mmd'));
  
  console.log(`✅ Generated invalid preview at: ${outputPath}`);
  console.log(`📊 Total invalid diagrams: ${invalidFiles.length}`);
}

main();
