#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function generateInvalidMarkdown(diagramType = 'flowchart') {
  const fixturesDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType);
  const invalidDir = path.join(fixturesDir, 'invalid');
  
  if (!fs.existsSync(invalidDir)) {
    console.error(`No invalid fixtures found for diagram type: ${diagramType}`);
    process.exit(1);
  }
  
  const invalidFiles = fs.readdirSync(invalidDir)
    .filter(f => f.endsWith('.mmd'))
    .sort();
  
  let markdown = `# Invalid ${diagramType.charAt(0).toUpperCase() + diagramType.slice(1)} Diagrams

This file documents all invalid ${diagramType} test fixtures that should be rejected by the linter.
These diagrams are confirmed to fail validation in mermaid-cli.

> **Note**: This file is auto-generated by \`scripts/generate-invalid-preview.js\`. Do not edit manually.
> 
> ‚ö†Ô∏è **Warning**: These diagrams are intentionally invalid and will not render properly.

## Table of Contents

`;

  // Generate table of contents
  invalidFiles.forEach((file, index) => {
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    markdown += `${index + 1}. [${title}](#${index + 1}-${file.replace('.mmd', '').toLowerCase()})\n`;
  });
  
  markdown += `\n---\n\n`;
  
  // Generate diagram sections
  invalidFiles.forEach((file, index) => {
    const filePath = path.join(invalidDir, file);
    const content = fs.readFileSync(filePath, 'utf-8');
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    
    markdown += `## ${index + 1}. ${title}\n\n`;
    markdown += `üìÑ **Source**: [\`${file}\`](./invalid/${file})\n\n`;
    
    // Add error descriptions
    const errorDescriptions = {
      'duplicate-subgraph': '‚ùå **Error**: Duplicate subgraph IDs are not allowed.',
      'empty-diagram': '‚ùå **Error**: Diagram must contain at least one statement after declaration.',
      'invalid-arrow': '‚ùå **Error**: Single arrow `->` is invalid. Use `-->` instead.',
      'invalid-class': '‚ùå **Error**: Class statement requires both node ID(s) and class name.',
      'invalid-node-syntax': '‚ùå **Error**: Incomplete node syntax with unclosed brackets.',
      'invalid-subgraph': '‚ùå **Error**: Subgraph must have an ID or title.',
      'missing-arrow': '‚ùå **Error**: Nodes on the same line must be connected with arrows.',
      'mixed-brackets': '‚ùå **Error**: Mixing bracket types like `[text)` is not allowed.',
      'no-diagram-type': '‚ùå **Error**: Diagram must start with `graph` or `flowchart`.',
      'special-chars': '‚ùå **Error**: Escaped quotes with backslash not supported in node labels.',
      'unclosed-bracket': '‚ùå **Error**: All brackets must be properly closed.',
      'unmatched-end': '‚ùå **Error**: `end` keyword without matching `subgraph`.',
      'wrong-direction': '‚ùå **Error**: Invalid direction. Must be one of: TD, TB, BT, RL, LR.'
    };
    
    const key = file.replace('.mmd', '');
    if (errorDescriptions[key]) {
      markdown += `${errorDescriptions[key]}\n\n`;
    }
    
    // Add the source code (not as mermaid since it won't render)
    markdown += `### Source Code\n\n`;
    markdown += `\`\`\`\n${content}\n\`\`\`\n\n`;
    
    // Add what the linter detects
    markdown += `### Linter Output\n\n`;
    markdown += `When validated, this diagram produces error(s) related to the issue described above.\n\n`;
    
    markdown += `---\n\n`;
  });
  
  // Add footer
  markdown += `## Validation Status

All diagrams in this file are confirmed to be invalid by:
- ‚ùå Our Mermaid linter (correctly rejects)
- ‚ùå Official mermaid-cli (correctly rejects)

Last generated: ${new Date().toISOString()}

## How to Regenerate

\`\`\`bash
node scripts/generate-invalid-preview.js ${diagramType}
\`\`\`
`;
  
  return markdown;
}

function main() {
  const diagramType = process.argv[2] || 'flowchart';
  const outputPath = path.resolve(__dirname, '..', 'test-fixtures', diagramType, 'INVALID_DIAGRAMS.md');
  
  console.log(`Generating invalid preview for ${diagramType} diagrams...`);
  
  const markdown = generateInvalidMarkdown(diagramType);
  
  fs.writeFileSync(outputPath, markdown);
  
  console.log(`‚úÖ Generated invalid preview at: ${outputPath}`);
  console.log(`üìä Total invalid diagrams: ${markdown.match(/### Source Code/g).length}`);
}

main();