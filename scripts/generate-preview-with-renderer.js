#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import { renderMermaid } from '../out/renderer/index.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function runMermaidCli(filepath) {
  const outSvg = `/tmp/mermaid-cli-${path.basename(filepath)}.svg`;
  try {
    const puppeteerCfg = path.resolve(__dirname, 'puppeteer-ci.json');
    const pFlag = fs.existsSync(puppeteerCfg) ? ` -p "${puppeteerCfg}"` : '';
    execSync(`npx @mermaid-js/mermaid-cli${pFlag} -i "${filepath}" -o "${outSvg}"`, {
      stdio: 'pipe',
      encoding: 'utf8',
      timeout: 12000,
    });
  } catch (error) {
    const raw = (error.stderr || error.stdout || error.message || '').toString();
    try { fs.unlinkSync(outSvg); } catch {}
    return { valid: false, message: raw.trim() || 'INVALID (no message)' };
  }
  try {
    const svg = fs.readFileSync(outSvg, 'utf8');
    const isError = /aria-roledescription\s*=\s*"error"/.test(svg) || /class=\"error-text\"/.test(svg);
    try { fs.unlinkSync(outSvg); } catch {}
    return { valid: !isError, message: isError ? 'INVALID (error SVG)' : 'VALID' };
  } catch {
    try { fs.unlinkSync(outSvg); } catch {}
    return { valid: false, message: 'INVALID (could not read output SVG)' };
  }
}

function generate(diagramType) {
  const fixturesDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType);
  const validDir = path.join(fixturesDir, 'valid');
  const files = fs.readdirSync(validDir).filter(f => f.endsWith('.mmd')).sort();

  let md = `# Valid ${diagramType[0].toUpperCase()+diagramType.slice(1)} Diagrams\n\n`+
           `This file contains all valid ${diagramType} test fixtures rendered with both Mermaid and our Maid renderer.\n\n`+
           `> **Note**: This file is auto-generated by \`scripts/generate-preview-with-renderer.js\`. Do not edit manually.\n\n`+
           `## Renderer Comparison\n\n`+
           `| Renderer | Description |\n|----------|-------------|\n| **Mermaid** | Official Mermaid.js renderer (GitHub/mermaid-cli) |\n| **Maid** | Our experimental lightweight renderer (Chevrotain + Dagre) - for parser validation |\n\n`+
           `## Table of Contents\n\n`;
  files.forEach((f,i)=>{ md += `${i+1}. [${f.replace('.mmd','').replace(/-/g,' ')}](#${i+1}-${f.replace('.mmd','').toLowerCase()})\n`;});
  md += `\n---\n\n`;

  for (let i=0;i<files.length;i++) {
    const file = files[i];
    const filePath = path.join(validDir, file);
    const content = fs.readFileSync(filePath,'utf8');
    const title = file.replace('.mmd','').replace(/-/g,' ').replace(/\b\w/g,c=>c.toUpperCase());
    md += `## ${i+1}. ${title}\n\n`;
    md += `üìÑ **Source**: [\`${file}\`](./valid/${file})\n\n`;
    md += `### Rendered Output\n\n<table>\n<tr>\n<th width=\"50%\">Mermaid (Official)</th>\n<th width=\"50%\">Maid (Experimental)</th>\n</tr>\n<tr>\n<td>\n\n`;
    md += `\`\`\`mermaid\n${content}\n\`\`\`\n\n`;
    md += `</td>\n<td>\n\n`;
    try {
      const result = renderMermaid(content);
      if (result && result.svg) {
        const renderedDir = path.join(fixturesDir, 'rendered');
        fs.mkdirSync(renderedDir,{recursive:true});
        const svgFile = file.replace('.mmd','.svg');
        fs.writeFileSync(path.join(renderedDir, svgFile), result.svg);
        md += `<img src=\"./rendered/${svgFile}\" alt=\"Maid Rendered Diagram\" />\n\n`;
      } else {
        md += `<sub>‚ö†Ô∏è Rendering not yet implemented for this diagram type</sub>\n\n`;
      }
    } catch (e) {
      md += `<sub>‚ùå Rendering failed: ${e.message}</sub>\n\n`;
    }
    md += `</td>\n</tr>\n</table>\n\n`;
    md += `<details>\n<summary>View source code</summary>\n\n\`\`\`\n${content}\n\`\`\`\n</details>\n\n---\n\n`;
  }

  return md;
}

function main(){
  const diagramType = process.argv[2] || 'flowchart';
  const outPath = path.resolve(__dirname, '..','test-fixtures',diagramType,'VALID_DIAGRAMS.md');
  console.log(`Generating renderer comparison preview for ${diagramType}...`);
  const md = generate(diagramType);
  fs.writeFileSync(outPath, md);
  console.log(`‚úÖ Generated preview at: ${outPath}`);
}

main();

