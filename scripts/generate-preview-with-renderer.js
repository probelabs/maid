#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { renderMermaid } from '../out/renderer/index.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function generateMarkdownPreview(diagramType = 'flowchart') {
  const fixturesDir = path.resolve(__dirname, '..', 'test-fixtures', diagramType);
  const validDir = path.join(fixturesDir, 'valid');

  if (!fs.existsSync(validDir)) {
    console.error(`No valid fixtures found for diagram type: ${diagramType}`);
    process.exit(1);
  }

  const validFiles = fs.readdirSync(validDir)
    .filter(f => f.endsWith('.mmd'))
    .sort();

  let markdown = `# Valid ${diagramType.charAt(0).toUpperCase() + diagramType.slice(1)} Diagrams

This file contains all valid ${diagramType} test fixtures rendered with both Mermaid and our Maid renderer.

> **Note**: This file is auto-generated by \`scripts/generate-preview-with-renderer.js\`. Do not edit manually.

## Renderer Comparison

| Renderer | Description |
|----------|-------------|
| **Mermaid** | Official Mermaid.js renderer (GitHub/mermaid-cli) |
| **Maid** | Our lightweight renderer using Chevrotain + Dagre |

## Table of Contents

`;

  // Generate table of contents
  validFiles.forEach((file, index) => {
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    markdown += `${index + 1}. [${title}](#${index + 1}-${file.replace('.mmd', '').toLowerCase()})\n`;
  });

  markdown += `\n---\n\n`;

  // Generate diagram sections
  validFiles.forEach((file, index) => {
    const filePath = path.join(validDir, file);
    const content = fs.readFileSync(filePath, 'utf-8');
    const name = file.replace('.mmd', '').replace(/-/g, ' ');
    const title = name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');

    markdown += `## ${index + 1}. ${title}\n\n`;
    markdown += `üìÑ **Source**: [\`${file}\`](./valid/${file})\n\n`;

    // Add description based on filename
    const descriptions = {
      'simple-flow': 'Basic flowchart with simple node connections.',
      'with-text': 'Flowchart with text labels and decision nodes.',
      'complex-shapes': 'Demonstrates all available node shapes in Mermaid.',
      'subgraphs': 'Shows subgraph grouping functionality.',
      'nested-subgraphs': 'Nested subgraphs with multiple levels.',
      'special-arrows': 'Various arrow types and directions.',
      'link-styles': 'Different link and arrow styles.',
      'multidirectional-arrows': 'Bidirectional and special endpoint arrows.',
      'chained-connections': 'Chained node connections and multi-target syntax.',
      'node-ids-special': 'Special characters in node IDs.',
      'unicode-text': 'Unicode characters and emojis in node text.',
      'empty-nodes': 'Nodes with empty or whitespace-only content.',
      'long-text': 'Nodes with long text content.',
      'styling-classes': 'CSS class definitions and styling.',
      'only-nodes': 'Nodes defined without any connections.',
      'comments': 'Diagrams with comments.',
      'undefined-node': 'Auto-creation of nodes when referenced in links.',
      'parallel-edges': 'Multiple connections between same nodes.',
      'custom-auth-subgraph': 'Custom authentication flow example.',
      'duplicate-subgraph': 'Handling of duplicate subgraph names.',
      'direction-statements': 'Direction changes within subgraphs.',
      'sample-dashpath': 'Dashed line paths for connections.'
    };

    const key = file.replace('.mmd', '');
    if (descriptions[key]) {
      markdown += `> ${descriptions[key]}\n\n`;
    }

    // Add tabs for comparing renderers
    markdown += `### Rendered Output\n\n`;
    markdown += `<table>\n<tr>\n`;
    markdown += `<th width="50%">Mermaid (Official)</th>\n`;
    markdown += `<th width="50%">Maid (Our Renderer)</th>\n`;
    markdown += `</tr>\n<tr>\n<td>\n\n`;

    // Mermaid diagram (GitHub will render this)
    markdown += `\`\`\`mermaid\n${content}\n\`\`\`\n\n`;

    markdown += `</td>\n<td>\n\n`;

    // Our renderer output
    try {
      // Only render flowcharts for now since our renderer only supports them
      if (diagramType === 'flowchart') {
        const result = renderMermaid(content);

        if (result.errors.length === 0) {
          // Save SVG to file
          const svgDir = path.join(fixturesDir, 'rendered');
          if (!fs.existsSync(svgDir)) {
            fs.mkdirSync(svgDir, { recursive: true });
          }

          const svgFilename = file.replace('.mmd', '.svg');
          const svgPath = path.join(svgDir, svgFilename);
          fs.writeFileSync(svgPath, result.svg, 'utf-8');

          // Link to the SVG file
          markdown += `![Maid Renderer Output](./rendered/${svgFilename})\n\n`;

          // Add stats
          markdown += `<sub>‚úÖ Rendered successfully<br>`;
          markdown += `Nodes: ${result.graph.nodes.length}, Edges: ${result.graph.edges.length}</sub>\n\n`;
        } else {
          markdown += `‚ö†Ô∏è **Rendering errors:**\n\n`;
          result.errors.forEach(err => {
            markdown += `- Line ${err.line}:${err.column} - ${err.message}\n`;
          });
          markdown += `\n`;
        }
      } else {
        markdown += `‚ö†Ô∏è *Maid renderer currently only supports flowchart diagrams*\n\n`;
      }
    } catch (e) {
      markdown += `‚ùå **Rendering failed:** ${e.message}\n\n`;
    }

    markdown += `</td>\n</tr>\n</table>\n\n`;

    // Add collapsible source code section
    markdown += `<details>\n`;
    markdown += `<summary>View source code</summary>\n\n`;
    markdown += `\`\`\`\n${content}\n\`\`\`\n`;
    markdown += `</details>\n\n`;

    markdown += `---\n\n`;
  });

  // Add footer
  markdown += `## Validation Status

All diagrams in this file have been validated against:
- ‚úÖ Our Mermaid linter
- ‚úÖ Official mermaid-cli
- ‚úÖ Our Maid renderer (flowcharts only)
- ‚úÖ GitHub's Mermaid renderer

## Renderer Comparison Summary

- **Mermaid.js**: Full-featured, 2.6MB bundle, supports all diagram types
- **Maid Renderer**: Lightweight, 294KB bundle, currently flowcharts only

Generated by scripts/generate-preview-with-renderer.js
`;

  // Save the markdown file
  const outputFile = path.join(fixturesDir, 'VALID_DIAGRAMS.md');
  fs.writeFileSync(outputFile, markdown, 'utf-8');

  console.log(`‚úÖ Generated ${outputFile}`);
  console.log(`   Processed ${validFiles.length} valid ${diagramType} diagrams`);

  if (diagramType === 'flowchart') {
    const renderedDir = path.join(fixturesDir, 'rendered');
    if (fs.existsSync(renderedDir)) {
      const svgFiles = fs.readdirSync(renderedDir).filter(f => f.endsWith('.svg'));
      console.log(`   Generated ${svgFiles.length} SVG files in ${renderedDir}`);
    }
  }
}

// Main execution
const diagramType = process.argv[2] || 'flowchart';
generateMarkdownPreview(diagramType);