name: Test Mermaid Linter

on:
  push:
    branches: [ main, test-fixtures-comparison ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build
    
    - name: SDK smoke test (ESM)
      run: npm run test:sdk
    
    - name: Run linter tests (flowchart baseline)
      run: |
        echo "Running linter tests on flowchart diagrams..."
        npm test

    - name: Error code tests (all types)
      run: |
        echo "Running error-code assertions for flowchart, pie, sequence..."
        npm run test:errors:all

    - name: Autofix tests (safe and all)
      run: |
        echo "Running autofix suite (safe + heuristic checks)..."
        node scripts/test-fixes.js

    - name: Markdown multi-diagram test
      run: |
        echo "Verifying Markdown extraction and line offsets..."
        npm run test:markdown

    - name: Directory scan test
      run: |
        echo "Verifying directory scanning, include/exclude, and .gitignore..."
        npm run test:dir
    
    - name: Test individual valid diagrams
      run: |
        echo "Testing valid diagrams..."
        for file in test-fixtures/flowchart/valid/*.mmd; do
          echo "Testing: $file"
          node out/cli.js "$file" || exit 1
        done
    
    - name: Test individual invalid diagrams
      run: |
        echo "Testing invalid diagrams (should fail)..."
        for file in test-fixtures/flowchart/invalid/*.mmd; do
          echo "Testing: $file"
          name=$(basename "$file")
          if [ "$name" = "empty-diagram.mmd" ]; then
            # mermaid-cli treats header-only diagrams as valid; ensure we match
            if node out/cli.js "$file" 2>/dev/null; then
              echo "✓ Correctly accepted header-only diagram (mermaid-cli compatible)"
            else
              echo "ERROR: $file should be valid (header-only) but failed!"
              exit 1
            fi
            continue
          fi
          if node out/cli.js "$file" 2>/dev/null; then
            echo "ERROR: $file should have failed but passed!"
            exit 1
          else
            echo "✓ Correctly detected as invalid"
          fi
        done
    
    - name: Compare with mermaid-cli (flowchart)
      continue-on-error: true
      run: |
        echo "Comparing with official mermaid-cli (flowchart)..."
        node scripts/compare-linters.js flowchart || echo "Comparison completed with differences"

    - name: Compare with mermaid-cli (pie)
      continue-on-error: true
      run: |
        echo "Comparing with official mermaid-cli (pie)..."
        node scripts/compare-linters.js pie || echo "Comparison completed with differences"

    - name: Compare with mermaid-cli (sequence)
      continue-on-error: true
      run: |
        echo "Comparing with official mermaid-cli (sequence)..."
        node scripts/compare-linters.js sequence || echo "Comparison completed with differences"
    
    - name: Summary
      if: always()
      run: |
        echo "## Test Summary"
        echo "- Node version: $(node -v)"
        echo "- Flowchart valid:  $(ls -1 test-fixtures/flowchart/valid/*.mmd | wc -l)"
        echo "- Flowchart invalid:$(ls -1 test-fixtures/flowchart/invalid/*.mmd | wc -l)"
        echo "- Pie valid:        $(ls -1 test-fixtures/pie/valid/*.mmd | wc -l)"
        echo "- Pie invalid:      $(ls -1 test-fixtures/pie/invalid/*.mmd | wc -l)"
        echo "- Sequence valid:   $(ls -1 test-fixtures/sequence/valid/*.mmd | wc -l)"
        echo "- Sequence invalid: $(ls -1 test-fixtures/sequence/invalid/*.mmd | wc -l)"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check TypeScript
      run: npx tsc --noEmit || echo "TypeScript check completed"
    
    - name: Check formatting
      continue-on-error: true
      run: |
        if [ -f "package.json" ] && grep -q "\"prettier\"" package.json; then
          npx prettier --check "**/*.{js,ts,json,md}" || echo "Formatting issues found"
        else
          echo "Prettier not configured"
        fi
