/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const MermaidLintTerminals = {
    ID: /[a-zA-Z_][a-zA-Z0-9_-]*/,
    STRING: /"[^"]*"|'[^']*'/,
    TEXT: /[^[\](){}|<>\n]+/,
    COLOR: /#[0-9a-fA-F]{3,6}/,
    NUMBER: /[0-9]+(\.[0-9]+)?/,
    COMMENT: /%%[^\n]*/,
    WS: /\s+/,
    NL: /[\r\n]+/,
};

export type MermaidLintTerminalNames = keyof typeof MermaidLintTerminals;

export type MermaidLintKeywordNames =
    | "("
    | "(("
    | "((("
    | "(["
    | ")"
    | "))"
    | ")))"
    | ")]"
    | ","
    | "---"
    | "----"
    | "-----"
    | "---->"
    | "--->"
    | "-->"
    | "-.-"
    | "-.->"
    | "-..-"
    | "-..->"
    | "-...-"
    | "-...->"
    | "/]"
    | ":"
    | "<--"
    | "<---"
    | "<----"
    | "<-.-"
    | "<-..-"
    | "<-...-"
    | "<=="
    | "<==="
    | "<===="
    | "==="
    | "===="
    | "====="
    | "====>"
    | "===>"
    | "==>"
    | ">"
    | "BT"
    | "LR"
    | "RL"
    | "TB"
    | "TD"
    | "["
    | "[("
    | "[/"
    | "[\\"
    | "\\]"
    | "]"
    | "])"
    | "classDef"
    | "end"
    | "flowchart"
    | "graph"
    | "style"
    | "subgraph"
    | "{"
    | "{{"
    | "|"
    | "}"
    | "}}";

export type MermaidLintTokenNames = MermaidLintTerminalNames | MermaidLintKeywordNames;

export type ArrowLink = '---' | '----' | '-----' | '---->' | '--->' | '-->' | '<--' | '<---' | '<----';

export function isArrowLink(item: unknown): item is ArrowLink {
    return item === '-->' || item === '--->' || item === '---->' || item === '<--' || item === '<---' || item === '<----' || item === '---' || item === '----' || item === '-----';
}

export interface Asymmetric extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Asymmetric';
    content: NodeContent;
}

export const Asymmetric = {
    $type: 'Asymmetric',
    content: 'content'
} as const;

export function isAsymmetric(item: unknown): item is Asymmetric {
    return reflection.isInstance(item, Asymmetric.$type);
}

export interface Circle extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Circle';
    content: NodeContent;
}

export const Circle = {
    $type: 'Circle',
    content: 'content'
} as const;

export function isCircle(item: unknown): item is Circle {
    return reflection.isInstance(item, Circle.$type);
}

export interface ClassDefinition extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'ClassDefinition';
    name: string;
    styles: StyleList;
}

export const ClassDefinition = {
    $type: 'ClassDefinition',
    name: 'name',
    styles: 'styles'
} as const;

export function isClassDefinition(item: unknown): item is ClassDefinition {
    return reflection.isInstance(item, ClassDefinition.$type);
}

export interface Comment extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'Comment';
    content: string;
}

export const Comment = {
    $type: 'Comment',
    content: 'content'
} as const;

export function isComment(item: unknown): item is Comment {
    return reflection.isInstance(item, Comment.$type);
}

export interface Cylinder extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Cylinder';
    content: NodeContent;
}

export const Cylinder = {
    $type: 'Cylinder',
    content: 'content'
} as const;

export function isCylinder(item: unknown): item is Cylinder {
    return reflection.isInstance(item, Cylinder.$type);
}

export interface DiagramType extends langium.AstNode {
    readonly $container: FlowchartDiagram;
    readonly $type: 'DiagramType';
    direction: Direction;
}

export const DiagramType = {
    $type: 'DiagramType',
    direction: 'direction'
} as const;

export function isDiagramType(item: unknown): item is DiagramType {
    return reflection.isInstance(item, DiagramType.$type);
}

export interface Diamond extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Diamond';
    content: NodeContent;
}

export const Diamond = {
    $type: 'Diamond',
    content: 'content'
} as const;

export function isDiamond(item: unknown): item is Diamond {
    return reflection.isInstance(item, Diamond.$type);
}

export type Direction = 'BT' | 'LR' | 'RL' | 'TB' | 'TD';

export function isDirection(item: unknown): item is Direction {
    return item === 'TD' || item === 'TB' || item === 'BT' || item === 'RL' || item === 'LR';
}

export type DottedLink = '-.-' | '-.->' | '-..-' | '-..->' | '-...-' | '-...->' | '<-.-' | '<-..-' | '<-...-';

export function isDottedLink(item: unknown): item is DottedLink {
    return item === '-.->' || item === '-..->' || item === '-...->' || item === '<-.-' || item === '<-..-' || item === '<-...-' || item === '-.-' || item === '-..-' || item === '-...-';
}

export interface DoubleCircle extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'DoubleCircle';
    content: NodeContent;
}

export const DoubleCircle = {
    $type: 'DoubleCircle',
    content: 'content'
} as const;

export function isDoubleCircle(item: unknown): item is DoubleCircle {
    return reflection.isInstance(item, DoubleCircle.$type);
}

export interface FlowchartDiagram extends langium.AstNode {
    readonly $type: 'FlowchartDiagram';
    statements: Array<Statement>;
    type: DiagramType;
}

export const FlowchartDiagram = {
    $type: 'FlowchartDiagram',
    statements: 'statements',
    type: 'type'
} as const;

export function isFlowchartDiagram(item: unknown): item is FlowchartDiagram {
    return reflection.isInstance(item, FlowchartDiagram.$type);
}

export interface Hexagon extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Hexagon';
    content: NodeContent;
}

export const Hexagon = {
    $type: 'Hexagon',
    content: 'content'
} as const;

export function isHexagon(item: unknown): item is Hexagon {
    return reflection.isInstance(item, Hexagon.$type);
}

export type Link = ArrowLink | DottedLink | ThickLink;

export function isLink(item: unknown): item is Link {
    return isArrowLink(item) || isDottedLink(item) || isThickLink(item);
}

export interface LinkStatement extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'LinkStatement';
    from: NodeRef;
    link: Link;
    linkText?: LinkText;
    to: NodeRef;
}

export const LinkStatement = {
    $type: 'LinkStatement',
    from: 'from',
    link: 'link',
    linkText: 'linkText',
    to: 'to'
} as const;

export function isLinkStatement(item: unknown): item is LinkStatement {
    return reflection.isInstance(item, LinkStatement.$type);
}

export interface LinkText extends langium.AstNode {
    readonly $container: LinkStatement;
    readonly $type: 'LinkText';
    text: NodeContent;
}

export const LinkText = {
    $type: 'LinkText',
    text: 'text'
} as const;

export function isLinkText(item: unknown): item is LinkText {
    return reflection.isInstance(item, LinkText.$type);
}

export type NodeContent = QuotedString | UnquotedText;

export function isNodeContent(item: unknown): item is NodeContent {
    return isQuotedString(item) || isUnquotedText(item);
}

export interface NodeDefinition extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'NodeDefinition';
    id: NodeId;
    shape?: NodeShape;
}

export const NodeDefinition = {
    $type: 'NodeDefinition',
    id: 'id',
    shape: 'shape'
} as const;

export function isNodeDefinition(item: unknown): item is NodeDefinition {
    return reflection.isInstance(item, NodeDefinition.$type);
}

export type NodeId = string;

export function isNodeId(item: unknown): item is NodeId {
    return (typeof item === 'string' && (/[a-zA-Z_][a-zA-Z0-9_-]*/.test(item)));
}

export interface NodeRef extends langium.AstNode {
    readonly $container: LinkStatement;
    readonly $type: 'NodeRef';
    id: string;
}

export const NodeRef = {
    $type: 'NodeRef',
    id: 'id'
} as const;

export function isNodeRef(item: unknown): item is NodeRef {
    return reflection.isInstance(item, NodeRef.$type);
}

export type NodeShape = Asymmetric | Circle | Cylinder | Diamond | DoubleCircle | Hexagon | Parallelogram | RoundBrackets | SquareBrackets | Stadium | Trapezoid;

export const NodeShape = {
    $type: 'NodeShape'
} as const;

export function isNodeShape(item: unknown): item is NodeShape {
    return reflection.isInstance(item, NodeShape.$type);
}

export interface Parallelogram extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Parallelogram';
    content: NodeContent;
}

export const Parallelogram = {
    $type: 'Parallelogram',
    content: 'content'
} as const;

export function isParallelogram(item: unknown): item is Parallelogram {
    return reflection.isInstance(item, Parallelogram.$type);
}

export type QuotedString = string;

export function isQuotedString(item: unknown): item is QuotedString {
    return (typeof item === 'string' && (/"[^"]*"|'[^']*'/.test(item)));
}

export interface RoundBrackets extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'RoundBrackets';
    content: NodeContent;
}

export const RoundBrackets = {
    $type: 'RoundBrackets',
    content: 'content'
} as const;

export function isRoundBrackets(item: unknown): item is RoundBrackets {
    return reflection.isInstance(item, RoundBrackets.$type);
}

export interface SquareBrackets extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'SquareBrackets';
    content: NodeContent;
}

export const SquareBrackets = {
    $type: 'SquareBrackets',
    content: 'content'
} as const;

export function isSquareBrackets(item: unknown): item is SquareBrackets {
    return reflection.isInstance(item, SquareBrackets.$type);
}

export interface Stadium extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Stadium';
    content: NodeContent;
}

export const Stadium = {
    $type: 'Stadium',
    content: 'content'
} as const;

export function isStadium(item: unknown): item is Stadium {
    return reflection.isInstance(item, Stadium.$type);
}

export type Statement = ClassDefinition | Comment | LinkStatement | NodeDefinition | StyleDefinition | SubgraphDefinition;

export const Statement = {
    $type: 'Statement'
} as const;

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement.$type);
}

export interface StyleDefinition extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'StyleDefinition';
    styles: StyleList;
    target: string;
}

export const StyleDefinition = {
    $type: 'StyleDefinition',
    styles: 'styles',
    target: 'target'
} as const;

export function isStyleDefinition(item: unknown): item is StyleDefinition {
    return reflection.isInstance(item, StyleDefinition.$type);
}

export interface StyleList extends langium.AstNode {
    readonly $container: ClassDefinition | StyleDefinition;
    readonly $type: 'StyleList';
    styles: Array<StylePair>;
}

export const StyleList = {
    $type: 'StyleList',
    styles: 'styles'
} as const;

export function isStyleList(item: unknown): item is StyleList {
    return reflection.isInstance(item, StyleList.$type);
}

export interface StylePair extends langium.AstNode {
    readonly $container: StyleList;
    readonly $type: 'StylePair';
    key: string;
    value: StyleValue;
}

export const StylePair = {
    $type: 'StylePair',
    key: 'key',
    value: 'value'
} as const;

export function isStylePair(item: unknown): item is StylePair {
    return reflection.isInstance(item, StylePair.$type);
}

export type StyleValue = string;

export function isStyleValue(item: unknown): item is StyleValue {
    return (typeof item === 'string' && (/"[^"]*"|'[^']*'/.test(item) || /[a-zA-Z_][a-zA-Z0-9_-]*/.test(item) || /#[0-9a-fA-F]{3,6}/.test(item) || /[0-9]+(\.[0-9]+)?/.test(item)));
}

export interface SubgraphDefinition extends langium.AstNode {
    readonly $container: FlowchartDiagram | SubgraphDefinition;
    readonly $type: 'SubgraphDefinition';
    id?: string;
    statements: Array<Statement>;
    title?: NodeContent;
}

export const SubgraphDefinition = {
    $type: 'SubgraphDefinition',
    id: 'id',
    statements: 'statements',
    title: 'title'
} as const;

export function isSubgraphDefinition(item: unknown): item is SubgraphDefinition {
    return reflection.isInstance(item, SubgraphDefinition.$type);
}

export type ThickLink = '<==' | '<===' | '<====' | '===' | '====' | '=====' | '====>' | '===>' | '==>';

export function isThickLink(item: unknown): item is ThickLink {
    return item === '==>' || item === '===>' || item === '====>' || item === '<==' || item === '<===' || item === '<====' || item === '===' || item === '====' || item === '=====';
}

export interface Trapezoid extends langium.AstNode {
    readonly $container: NodeDefinition;
    readonly $type: 'Trapezoid';
    content: NodeContent;
}

export const Trapezoid = {
    $type: 'Trapezoid',
    content: 'content'
} as const;

export function isTrapezoid(item: unknown): item is Trapezoid {
    return reflection.isInstance(item, Trapezoid.$type);
}

export type UnquotedText = string;

export function isUnquotedText(item: unknown): item is UnquotedText {
    return (typeof item === 'string' && (/[^[\](){}|<>\n]+/.test(item)));
}

export type MermaidLintAstType = {
    Asymmetric: Asymmetric
    Circle: Circle
    ClassDefinition: ClassDefinition
    Comment: Comment
    Cylinder: Cylinder
    DiagramType: DiagramType
    Diamond: Diamond
    DoubleCircle: DoubleCircle
    FlowchartDiagram: FlowchartDiagram
    Hexagon: Hexagon
    LinkStatement: LinkStatement
    LinkText: LinkText
    NodeDefinition: NodeDefinition
    NodeRef: NodeRef
    NodeShape: NodeShape
    Parallelogram: Parallelogram
    RoundBrackets: RoundBrackets
    SquareBrackets: SquareBrackets
    Stadium: Stadium
    Statement: Statement
    StyleDefinition: StyleDefinition
    StyleList: StyleList
    StylePair: StylePair
    SubgraphDefinition: SubgraphDefinition
    Trapezoid: Trapezoid
}

export class MermaidLintAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        Asymmetric: {
            name: Asymmetric.$type,
            properties: {
                content: {
                    name: Asymmetric.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        Circle: {
            name: Circle.$type,
            properties: {
                content: {
                    name: Circle.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        ClassDefinition: {
            name: ClassDefinition.$type,
            properties: {
                name: {
                    name: ClassDefinition.name
                },
                styles: {
                    name: ClassDefinition.styles
                }
            },
            superTypes: [Statement.$type]
        },
        Comment: {
            name: Comment.$type,
            properties: {
                content: {
                    name: Comment.content
                }
            },
            superTypes: [Statement.$type]
        },
        Cylinder: {
            name: Cylinder.$type,
            properties: {
                content: {
                    name: Cylinder.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        DiagramType: {
            name: DiagramType.$type,
            properties: {
                direction: {
                    name: DiagramType.direction
                }
            },
            superTypes: []
        },
        Diamond: {
            name: Diamond.$type,
            properties: {
                content: {
                    name: Diamond.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        DoubleCircle: {
            name: DoubleCircle.$type,
            properties: {
                content: {
                    name: DoubleCircle.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        FlowchartDiagram: {
            name: FlowchartDiagram.$type,
            properties: {
                statements: {
                    name: FlowchartDiagram.statements,
                    defaultValue: []
                },
                type: {
                    name: FlowchartDiagram.type
                }
            },
            superTypes: []
        },
        Hexagon: {
            name: Hexagon.$type,
            properties: {
                content: {
                    name: Hexagon.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        LinkStatement: {
            name: LinkStatement.$type,
            properties: {
                from: {
                    name: LinkStatement.from
                },
                link: {
                    name: LinkStatement.link
                },
                linkText: {
                    name: LinkStatement.linkText
                },
                to: {
                    name: LinkStatement.to
                }
            },
            superTypes: [Statement.$type]
        },
        LinkText: {
            name: LinkText.$type,
            properties: {
                text: {
                    name: LinkText.text
                }
            },
            superTypes: []
        },
        NodeDefinition: {
            name: NodeDefinition.$type,
            properties: {
                id: {
                    name: NodeDefinition.id
                },
                shape: {
                    name: NodeDefinition.shape
                }
            },
            superTypes: [Statement.$type]
        },
        NodeRef: {
            name: NodeRef.$type,
            properties: {
                id: {
                    name: NodeRef.id
                }
            },
            superTypes: []
        },
        NodeShape: {
            name: NodeShape.$type,
            properties: {
            },
            superTypes: []
        },
        Parallelogram: {
            name: Parallelogram.$type,
            properties: {
                content: {
                    name: Parallelogram.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        RoundBrackets: {
            name: RoundBrackets.$type,
            properties: {
                content: {
                    name: RoundBrackets.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        SquareBrackets: {
            name: SquareBrackets.$type,
            properties: {
                content: {
                    name: SquareBrackets.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        Stadium: {
            name: Stadium.$type,
            properties: {
                content: {
                    name: Stadium.content
                }
            },
            superTypes: [NodeShape.$type]
        },
        Statement: {
            name: Statement.$type,
            properties: {
            },
            superTypes: []
        },
        StyleDefinition: {
            name: StyleDefinition.$type,
            properties: {
                styles: {
                    name: StyleDefinition.styles
                },
                target: {
                    name: StyleDefinition.target
                }
            },
            superTypes: [Statement.$type]
        },
        StyleList: {
            name: StyleList.$type,
            properties: {
                styles: {
                    name: StyleList.styles,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        StylePair: {
            name: StylePair.$type,
            properties: {
                key: {
                    name: StylePair.key
                },
                value: {
                    name: StylePair.value
                }
            },
            superTypes: []
        },
        SubgraphDefinition: {
            name: SubgraphDefinition.$type,
            properties: {
                id: {
                    name: SubgraphDefinition.id
                },
                statements: {
                    name: SubgraphDefinition.statements,
                    defaultValue: []
                },
                title: {
                    name: SubgraphDefinition.title
                }
            },
            superTypes: [Statement.$type]
        },
        Trapezoid: {
            name: Trapezoid.$type,
            properties: {
                content: {
                    name: Trapezoid.content
                }
            },
            superTypes: [NodeShape.$type]
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new MermaidLintAstReflection();
